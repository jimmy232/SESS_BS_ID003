[
    {
        "id": "b5b8c3ea.f445a",
        "type": "tab",
        "label": "Digitals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c69a38f8.8b3978",
        "type": "tab",
        "label": "Analog Alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "96efbfcc.040b3",
        "type": "tab",
        "label": "Analog Scale",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ffd1475f.49ff98",
        "type": "tab",
        "label": "Control Panel",
        "disabled": false,
        "info": ""
    },
    {
        "id": "be33cc6.affea3",
        "type": "tab",
        "label": "DB Connections",
        "disabled": false,
        "info": ""
    },
    {
        "id": "98a15ed9.8e1d5",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "13f38902.4f51a7",
        "type": "tab",
        "label": "OS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7ecf43eb.bcd3ec",
        "type": "tab",
        "label": "Firmware",
        "disabled": false,
        "info": ""
    },
    {
        "id": "96e1bdf8.23a17",
        "type": "tab",
        "label": "Remote",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ee92260d.8ac618",
        "type": "tab",
        "label": "Accumulators",
        "disabled": false,
        "info": ""
    },
    {
        "id": "2dfef0ab.ecafb",
        "type": "tab",
        "label": "IO Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "94d394af.e973c8",
        "type": "tab",
        "label": "Timers",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a27eb0d8.3c2fa",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8886",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "cb1b82bc.a26ae",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4da4ea34.630684",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8886",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "da535876.280af8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4d64fa3d.ad0334",
        "type": "mqtt-broker",
        "name": "",
        "broker": "driver.cloudmqtt.com",
        "port": "18748",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "7e73cdd4.e0b814",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "https://us-central1-1.gcp.cloud2.influxdata.com",
        "verifyservercert": true
    },
    {
        "id": "5fca9504.17508c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "1e88062a.770d7a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "45a7d85a.401588",
        "type": "ui_tab",
        "name": "Control Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "da91f024.78ee3",
        "type": "ui_tab",
        "name": "IO Measurements",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d8647c59.12493",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c5e7bce.dafe64",
        "type": "ui_tab",
        "name": "Parameters",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1140bc77.403c34",
        "type": "ui_tab",
        "name": "Alarm Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "87e78a20.98ffc8",
        "type": "ui_tab",
        "name": "Control Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e30c5524.3b03b8",
        "type": "ui_tab",
        "name": "IO Measurements",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c287c0e5.10e9b",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5e5f0080.da32c",
        "type": "ui_tab",
        "name": "Parameters",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2543fd32.5de642",
        "type": "ui_tab",
        "name": "Alarm Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f63880d3.c40ef",
        "type": "ui_tab",
        "name": "Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "83bb7073.89674",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4fe51183.62334",
        "type": "ui_group",
        "name": "Equipment Identification",
        "tab": "45a7d85a.401588",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5d3de38b.30602c",
        "type": "ui_group",
        "name": "Scale Factor (k)",
        "tab": "45a7d85a.401588",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ea8e7f4c.f8bcc",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "45a7d85a.401588",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "22362b2b.e9a1e4",
        "type": "ui_group",
        "name": "Digital Inputs",
        "tab": "da91f024.78ee3",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "682affd.438e7",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "da91f024.78ee3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8f5898a7.07fa48",
        "type": "ui_group",
        "name": "4..20mA Signals - 20sec Updates",
        "tab": "da91f024.78ee3",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bf96246c.d919c8",
        "type": "ui_group",
        "name": "PT100 Signals - 20sec Updates",
        "tab": "da91f024.78ee3",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2753fe30.136152",
        "type": "ui_group",
        "name": "Digital Outputs",
        "tab": "da91f024.78ee3",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d342ae97.3b2ec",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "45a7d85a.401588",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "18b9ac28.263ce4",
        "type": "ui_group",
        "name": "4n20mA HIGH Alarms",
        "tab": "d8647c59.12493",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "25e1adcb.525a02",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "d8647c59.12493",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bbe1e6e.c044218",
        "type": "ui_group",
        "name": "4n20mA LOW Alarms",
        "tab": "d8647c59.12493",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a0ab591e.494fc8",
        "type": "ui_group",
        "name": "PT100 LOW Alarms",
        "tab": "d8647c59.12493",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5a0ef1e2.ddb77",
        "type": "ui_group",
        "name": "PT100 HIGH Alarms",
        "tab": "d8647c59.12493",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c9c66b1f.63bdc8",
        "type": "ui_group",
        "name": "4n20mA - LOW Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d41c1003.34b84",
        "type": "ui_group",
        "name": "4n20mA - HIGH Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "64e82ef2.ffce3",
        "type": "ui_group",
        "name": "PT100 - LOW Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d6b5f6cc.ac6ab8",
        "type": "ui_group",
        "name": "PT100 - HIGH Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4952bdf6.d526e4",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "1c5e7bce.dafe64",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2e9493b.19b276c",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "45a7d85a.401588",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e3d48d50.fae3f",
        "type": "ui_group",
        "name": "System Info",
        "tab": "45a7d85a.401588",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1f86c7fe.575f98",
        "type": "ui_group",
        "name": "PT100 - LOW Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1053e3d8.f35acc",
        "type": "ui_group",
        "name": "PT100 - HIGH Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9cc24926.921388",
        "type": "ui_group",
        "name": "4n20 - LOW Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1c35732b.c16ddd",
        "type": "ui_group",
        "name": "4n20 - HIGH Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "97964936.2f6b58",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "1140bc77.403c34",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5c1e3a03.f96f14",
        "type": "ui_group",
        "name": "Equipment Identification",
        "tab": "87e78a20.98ffc8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "17102250.63705e",
        "type": "ui_group",
        "name": "Scale Factor (k)",
        "tab": "87e78a20.98ffc8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6fb0f864.ab50a8",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "87e78a20.98ffc8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1eb39dcf.402d42",
        "type": "ui_group",
        "name": "Digital Inputs",
        "tab": "e30c5524.3b03b8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3ccf8783.a39388",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "e30c5524.3b03b8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c272663b.a14478",
        "type": "ui_group",
        "name": "4..20mA Signals - 20sec Updates",
        "tab": "e30c5524.3b03b8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "72834d19.0b2444",
        "type": "ui_group",
        "name": "PT100 Signals - 20sec Updates",
        "tab": "e30c5524.3b03b8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7c778399.916a2c",
        "type": "ui_group",
        "name": "Digital Outputs",
        "tab": "e30c5524.3b03b8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cc99a385.0e3b2",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "87e78a20.98ffc8",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b237d978.a14268",
        "type": "ui_group",
        "name": "4n20mA HIGH Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ddf1255a.a41838",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "c287c0e5.10e9b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d2b9ab7b.2c0768",
        "type": "ui_group",
        "name": "4n20mA LOW Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6d37b4c5.91432c",
        "type": "ui_group",
        "name": "PT100 LOW Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7374f39a.81f2fc",
        "type": "ui_group",
        "name": "PT100 HIGH Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "100a187b.33f1a8",
        "type": "ui_group",
        "name": "4n20mA - LOW Parameter",
        "tab": "5e5f0080.da32c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3f923ce4.4e7424",
        "type": "ui_group",
        "name": "4n20mA - HIGH Parameter",
        "tab": "5e5f0080.da32c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "61e2dc9d.93fca4",
        "type": "ui_group",
        "name": "PT100 - LOW Parameter",
        "tab": "5e5f0080.da32c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ac436fe4.bafe",
        "type": "ui_group",
        "name": "PT100 - HIGH Parameter",
        "tab": "5e5f0080.da32c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "21a017d8.e1e498",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "5e5f0080.da32c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "50eaefba.c2b8",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "87e78a20.98ffc8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1865bad3.468e45",
        "type": "ui_group",
        "name": "System Info",
        "tab": "87e78a20.98ffc8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f3836776.24a948",
        "type": "ui_group",
        "name": "PT100 - LOW Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f848f227.646ba",
        "type": "ui_group",
        "name": "PT100 - HIGH Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3680207b.60e1c",
        "type": "ui_group",
        "name": "4n20 - LOW Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8b02168c.0a4558",
        "type": "ui_group",
        "name": "4n20 - HIGH Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9e65150.45f55e8",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "2543fd32.5de642",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d3e0d058.2c0df",
        "type": "ui_group",
        "name": "G1",
        "tab": "f63880d3.c40ef",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "4c053cda.6a4c04",
        "type": "ui_group",
        "name": "G1",
        "tab": "83bb7073.89674",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "d18b2f8d.0d455",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "70f4e12a.5b525",
        "type": "mqtt-broker",
        "name": "Stand-Alone.sys",
        "broker": "tailor.cloudmqtt.com",
        "port": "10287",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "82134847.579938",
        "type": "modbus-client",
        "name": "LOCAL MODBUS SERVER",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.1.222",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "8b183f5.a3f60c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "7e73cdd4.e0b814",
        "influxdbVersion": "1.x",
        "url": "",
        "rejectUnauthorized": false
    },
    {
        "id": "22d24351.bec91c",
        "type": "inject",
        "z": "be33cc6.affea3",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "4189a1b4.00ca1"
            ]
        ]
    },
    {
        "id": "4f1d24cb.aec57c",
        "type": "inject",
        "z": "be33cc6.affea3",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "679ce809.efcc18"
            ]
        ]
    },
    {
        "id": "2b21128e.b166ae",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "RESET DATABASES",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "4255804d.90b2b",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "CREATES DATABASES",
        "info": "",
        "x": 130,
        "y": 260,
        "wires": []
    },
    {
        "id": "df2d8b6c.d32c78",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "PT100 Analog Signals",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "34a773d.611aa8c",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: String(output[8]),\n\t\t\t\tdatabaseID: String(output[9])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 460,
        "wires": [
            [
                "19a177d0.df1cc8"
            ]
        ]
    },
    {
        "id": "2fbedbe8.82d424",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n\t\t\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "22beccb1.1fd7e4"
            ]
        ]
    },
    {
        "id": "2f6f05d.019eefa",
        "type": "exec",
        "z": "98a15ed9.8e1d5",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 380,
        "wires": [
            [],
            [
                "7248732d.ccce7c"
            ],
            []
        ]
    },
    {
        "id": "fcaba7a3.ca89c8",
        "type": "inject",
        "z": "98a15ed9.8e1d5",
        "name": "48hr Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "172800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "19a177d0.df1cc8",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "be33cc6.affea3",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "c009b24a.46179",
        "type": "influxdb out",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "monicon_sess",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1020,
        "y": 80,
        "wires": []
    },
    {
        "id": "ba9608c6.c2ad38",
        "type": "influxdb out",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "monicon_sess",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1000,
        "y": 300,
        "wires": []
    },
    {
        "id": "22beccb1.1fd7e4",
        "type": "influxdb batch",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "monicon_sess",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1020,
        "y": 420,
        "wires": []
    },
    {
        "id": "4189a1b4.00ca1",
        "type": "influxdb in",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "name": "monicon.sess",
        "query": "DROP DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "c009b24a.46179"
            ]
        ]
    },
    {
        "id": "679ce809.efcc18",
        "type": "influxdb in",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "name": "monicon.sess",
        "query": "CREATE DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 740,
        "y": 300,
        "wires": [
            [
                "ba9608c6.c2ad38"
            ]
        ]
    },
    {
        "id": "75c3f0a8.37902",
        "type": "string",
        "z": "be33cc6.affea3",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "34a773d.611aa8c",
                "2fbedbe8.82d424"
            ]
        ]
    },
    {
        "id": "11d1d608.0bbd5a",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "4n20 Analog Signals",
        "info": "",
        "x": 110,
        "y": 380,
        "wires": []
    },
    {
        "id": "21ad688c.5d4ad8",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: String(output[8]),\n\t\t\t\tdatabaseID: String(output[9])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 580,
        "wires": [
            [
                "8782a3.eb310d6"
            ]
        ]
    },
    {
        "id": "705f1e80.d7115",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "9d0323dc.1a0c"
            ]
        ]
    },
    {
        "id": "8782a3.eb310d6",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "be33cc6.affea3",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "9d0323dc.1a0c",
        "type": "influxdb batch",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1020,
        "y": 540,
        "wires": []
    },
    {
        "id": "fbd3725.63f439",
        "type": "string",
        "z": "be33cc6.affea3",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "21ad688c.5d4ad8",
                "705f1e80.d7115"
            ]
        ]
    },
    {
        "id": "c7678cab.ec3a8",
        "type": "mqtt in",
        "z": "96efbfcc.040b3",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "7d64fdcf.1df994",
                "af2cd6ef.b72898"
            ]
        ]
    },
    {
        "id": "5d4e932b.cb4b5c",
        "type": "mqtt in",
        "z": "96efbfcc.040b3",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "ab4af917.15c4f8",
                "af2cd6ef.b72898"
            ]
        ]
    },
    {
        "id": "7d64fdcf.1df994",
        "type": "link out",
        "z": "96efbfcc.040b3",
        "name": "L-OUT-AI_4n20",
        "links": [
            "311cc9da.295866",
            "3e649a44.6ae766",
            "5809611c.f6149",
            "fb825d88.14935",
            "e4b05cb6.755b4",
            "61980d7c.a4f6f4",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 80,
        "wires": []
    },
    {
        "id": "ab4af917.15c4f8",
        "type": "link out",
        "z": "96efbfcc.040b3",
        "name": "L-OUT-AI_PT100",
        "links": [
            "d40653c7.effc4",
            "13f9abc2.609b44",
            "86a52f8.d751fd",
            "809e3c8c.14b8c",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 160,
        "wires": []
    },
    {
        "id": "5809611c.f6149",
        "type": "link in",
        "z": "be33cc6.affea3",
        "name": "",
        "links": [
            "7d64fdcf.1df994"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "75c3f0a8.37902"
            ]
        ]
    },
    {
        "id": "13f9abc2.609b44",
        "type": "link in",
        "z": "be33cc6.affea3",
        "name": "",
        "links": [
            "ab4af917.15c4f8"
        ],
        "x": 35,
        "y": 540,
        "wires": [
            [
                "fbd3725.63f439"
            ]
        ]
    },
    {
        "id": "13ac56b1.a5c6c9",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "c9385393.12254",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "23b3a3f3.2be3ac",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "f3876a65.35c758",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "9e74527f.e9742",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "10d3e6fb.30fc89",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "4b1fa78c.258908",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "aac466a6.88ab58",
                "87240409.e50aa8",
                "ed3b1d08.54e0e"
            ]
        ]
    },
    {
        "id": "ea460563.2a8db8",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Digital Input - Request",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "d62190ef.1aa39",
        "type": "comment",
        "z": "ffd1475f.49ff98",
        "name": "Send Email Notification",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "397e900a.f8b87",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/Device/4n20_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "4d1f6fa5.972dc",
                "c277528c.ce37d"
            ]
        ]
    },
    {
        "id": "61024d1d.597264",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/Device/PT100_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "d402e905.961428",
                "c277528c.ce37d"
            ]
        ]
    },
    {
        "id": "ebe5d567.4662c8",
        "type": "comment",
        "z": "c69a38f8.8b3978",
        "name": "Analog Alarms 1st <8x PT100 LOW Alarms> | 2nd <8x PT100 HIGH Alarms>",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "112e7538.82218b",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "9ed6844.e5f4378"
            ]
        ]
    },
    {
        "id": "38f41385.46a94c",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "54d4ce22.88a54"
            ]
        ]
    },
    {
        "id": "7cce42aa.ab93ac",
        "type": "comment",
        "z": "c69a38f8.8b3978",
        "name": "4n20mA Low Alarm - Rising Edge Trigger | <AI-ID> | <Limit-Type> | <Equip-Name>",
        "info": "",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "54d4ce22.88a54",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "L-ALM-PT100",
        "links": [
            "d807d70a.a4b808"
        ],
        "x": 475,
        "y": 340,
        "wires": []
    },
    {
        "id": "9ed6844.e5f4378",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "L-ALM-4n20",
        "links": [
            "1dd8267d.917d0a"
        ],
        "x": 475,
        "y": 420,
        "wires": []
    },
    {
        "id": "d807d70a.a4b808",
        "type": "link in",
        "z": "ffd1475f.49ff98",
        "name": "",
        "links": [
            "54d4ce22.88a54"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "4b6fefbb.8f0e7"
            ]
        ]
    },
    {
        "id": "a85520f3.d799d",
        "type": "comment",
        "z": "ffd1475f.49ff98",
        "name": "Alarm PT100",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "8bdabdf7.85095",
        "type": "comment",
        "z": "ffd1475f.49ff98",
        "name": "Alarm 4n20",
        "info": "",
        "x": 110,
        "y": 180,
        "wires": []
    },
    {
        "id": "1dd8267d.917d0a",
        "type": "link in",
        "z": "ffd1475f.49ff98",
        "name": "",
        "links": [
            "9ed6844.e5f4378"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "1ad23e9d.fe7701"
            ]
        ]
    },
    {
        "id": "4b6fefbb.8f0e7",
        "type": "function",
        "z": "ffd1475f.49ff98",
        "name": "Email Setup - PT100 Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_PT100 = global.get(\"subjectMSg_PT100\") || \"null\";                    //String\nlet bodyMSg_PT100 = global.get(\"bodyMSg_PT100\") || \"null\";                          //String\nlet addrTo_PT100 = global.get(\"addrTo_PT100\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_PT100 = global.get(\"addrCc_PT100\") || \"\";                            //Strng\nlet addrBcc_PT100 = global.get(\"addrBcc_PT100\") || \"\";                          //String\nlet subjectParameters_PT100 = global.get(\"subjectParameters_PT100\") || \"null\";      //String of bools\nlet bodyParameters_PT100 = global.get(\"bodyParameters_PT100\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_PT100.split('=');\nlet bodyPara = bodyParameters_PT100.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_PT100;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - PT100 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_PT100 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t PT100 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_PT100,\n    cc: addrCc_PT100,\n    bcc: addrBcc_PT100\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "2a682822.1833f8"
            ]
        ]
    },
    {
        "id": "d402e905.961428",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "L-PT100-ALM_FLAGS",
        "links": [
            "3184a127.75ebfe",
            "a10bac4a.3ef4b",
            "b4007e9b.4946c"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "4d1f6fa5.972dc",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "L-4n20-ALM_FLAGS",
        "links": [
            "35875a5a.263686"
        ],
        "x": 475,
        "y": 200,
        "wires": []
    },
    {
        "id": "71b4c5d1.e06b0c",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "reboot Counter",
        "func": "var deploys = global.get(\"deploys\") || 0;\ndeploys = deploys + 1;\nglobal.set(\"deploys\", deploys);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "4556caf4.b5a6c4",
        "type": "inject",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 260,
        "wires": [
            [
                "71b4c5d1.e06b0c"
            ]
        ]
    },
    {
        "id": "f51aed83.fcd69",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[7]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tRSSI: parseFloat(output[0]),\n\t\t\t\tWIFI_DC: parseFloat(output[1]),\n    \t\t\tMQTT_DC: parseFloat(output[2]),\n    \t\t\tDEVICE_IP: \"\\\"\" + output[3] + \"\\\"\",\n    \t\t\tserialNo: parseFloat(topic[3]),\n    \t\t\tESP_Temp: parseFloat(output[4]),\n    \t\t\ttwentySecLoop: parseFloat(output[5]),\n    \t\t\tTRUC_VERSION: String(output[6]),\n    \t\t\tdatabaseID: String(output[7]),\n    \t\t\tEquipmentID: String(output[8])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 700,
        "wires": [
            [
                "cc25011b.ca3f9"
            ]
        ]
    },
    {
        "id": "b4f4fe09.bc0dc",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n// Display data\n// var data = msg.payload.split(',')\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tRSSI: parseFloat(output[0]),\n\t\t\tWIFI_DC: parseFloat(output[1]),\n\t\t\tMQTT_DC: parseFloat(output[2]),\n\t\t\tDEVICE_IP: String(output[3]),\n\t\t\tSerialNo: String(topic[3]),\n\t\t\tESP_Temp: parseFloat(output[4]),\n\t\t\ttwentySecLoop: parseFloat(output[5]),\n\t\t\tTRUC_VERSION: output[6],\n\t\t\tdatabaseID: output[7],\n\t\t\tEquipmentID: output[8]\n\n\t\t},\n        tags:{\n            PLC: output[7] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 660,
        "wires": [
            [
                "78878201.33fb0c"
            ]
        ]
    },
    {
        "id": "cc25011b.ca3f9",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "be33cc6.affea3",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "78878201.33fb0c",
        "type": "influxdb batch",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1020,
        "y": 660,
        "wires": []
    },
    {
        "id": "312ecf0b.e6fde",
        "type": "mqtt in",
        "z": "be33cc6.affea3",
        "name": "",
        "topic": "MONICON-PLC/Device/Status/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "b4f4fe09.bc0dc",
                "f51aed83.fcd69"
            ]
        ]
    },
    {
        "id": "b2a5d3f6.66ce7",
        "type": "file in",
        "z": "7ecf43eb.bcd3ec",
        "name": "",
        "filename": "",
        "format": "",
        "sendError": true,
        "x": 950,
        "y": 40,
        "wires": [
            [
                "82586e7f.7fb0b",
                "565c90e6.c3bff"
            ]
        ]
    },
    {
        "id": "8b23ce11.c6023",
        "type": "switch",
        "z": "7ecf43eb.bcd3ec",
        "name": "Check user agent",
        "property": "req.headers.user-agent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "ESP32-http-Update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 40,
        "wires": [
            [],
            [
                "e8e84b69.b02f98"
            ]
        ]
    },
    {
        "id": "1bd5d045.8bccb",
        "type": "http in",
        "z": "7ecf43eb.bcd3ec",
        "name": "OTA Request",
        "url": "/firmwareUpdate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "8b23ce11.c6023"
            ]
        ]
    },
    {
        "id": "a60ce46e.4f5798",
        "type": "debug",
        "z": "7ecf43eb.bcd3ec",
        "name": "msg.mostRecentFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mostRecentFile",
        "x": 1000,
        "y": 260,
        "wires": []
    },
    {
        "id": "82586e7f.7fb0b",
        "type": "http response",
        "z": "7ecf43eb.bcd3ec",
        "name": "OTA Response",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 40,
        "wires": []
    },
    {
        "id": "a140e50a.87b938",
        "type": "function",
        "z": "7ecf43eb.bcd3ec",
        "name": "",
        "func": "///// \n\n\n//msg.filename = \"/home/pi/Firmware/PowerProV2.3.2.ino.nodemcu.bin\"\n//return msg\n\n//List of files from RPI Github\nvar firmwares = msg.files;\n//TRUC_VERSION DATA from ESP\nvar version = msg.req.headers;\n//Version Data\nvar currentFile = version[\"x-esp32-version\"];\n//Extract Device Type PowerPro or LightPro\nvar deviceType = currentFile.substring(0,currentFile.indexOf(\"V\")+1)\nmsg.deviceType = deviceType;\n\n//Extracts Github file that matches current ESP version ID\nvar existingFile = firmwares.filter(item=> item.includes(currentFile)).pop();\n//Filters out any incorrect device types ie PowerPro or LightPro\nvar firmwareNames = firmwares.filter(item=> item.includes(msg.deviceType));\n//Sorts out list of files\nvar comparer = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\nfirmwareNames.sort(comparer.compare)[firmwareNames.length-1];\n\nvar mostRecentFile;\n//Pops off most recent file\nmsg.mostRecentFile = firmwareNames.pop();\nmsg.existingFile = existingFile;\n//Compares ESP version to most recent developed file\n//if((msg.existingFile.localeCompare(msg.mostRecentFile)) < 0)\n//{\n    msg.filename = \"/home/pi/Firmware/\" + msg.mostRecentFile;\n// }\n// else\n// {\n//     msg.filename = undefined;\n//     msg.payload = \"No New File Exists\"\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 40,
        "wires": [
            [
                "a60ce46e.4f5798",
                "fd640bbc.fbbec8",
                "b2a5d3f6.66ce7"
            ]
        ]
    },
    {
        "id": "fd640bbc.fbbec8",
        "type": "debug",
        "z": "7ecf43eb.bcd3ec",
        "name": "msg.existingFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "existingFile",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "e8e84b69.b02f98",
        "type": "fs-ops-dir",
        "z": "7ecf43eb.bcd3ec",
        "name": "",
        "path": "/home/pi/Firmware",
        "pathType": "str",
        "filter": ".bin",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 540,
        "y": 40,
        "wires": [
            [
                "a140e50a.87b938",
                "3593958e.c4c7ca"
            ]
        ]
    },
    {
        "id": "d7939384.681fc",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "MQTTCloud => MONICON.LOCAL",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "2e4e3e23.3da442",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "x": 140,
        "y": 320,
        "wires": [
            [
                "b6ee6265.1202b",
                "b06efbe2.39fe38"
            ]
        ]
    },
    {
        "id": "aac466a6.88ab58",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "18cab98.a22cf47"
            ]
        ]
    },
    {
        "id": "b6ee6265.1202b",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 320,
        "wires": [
            [
                "babfb093.9a49e"
            ],
            [
                "993c9ce6.6d1d8"
            ]
        ]
    },
    {
        "id": "baf3774d.f807e8",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "MONICON-PLC/STAT/System/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 150,
        "y": 80,
        "wires": [
            [
                "d54f0248.71953"
            ]
        ]
    },
    {
        "id": "49e63a8c.ac6cc4",
        "type": "string",
        "z": "96e1bdf8.23a17",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 420,
        "y": 260,
        "wires": [
            [
                "b6ee6265.1202b"
            ]
        ]
    },
    {
        "id": "babfb093.9a49e",
        "type": "exec",
        "z": "96e1bdf8.23a17",
        "command": "cat /sys/class/net/wlan0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "ce1cce7a.bc5ef"
            ],
            [
                "6cb4af81.1ff3"
            ],
            []
        ]
    },
    {
        "id": "ce1cce7a.bc5ef",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nlet siteID = global.get(\"siteID\") || \"SiteIDxxx\";\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload + \",\";\n\nmsg.payload = data;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "993c9ce6.6d1d8"
            ]
        ]
    },
    {
        "id": "3f70c698.67936a",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Set MacAddress if NOT already Set",
        "info": "",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "d54f0248.71953",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "System Data",
        "func": "let siteID = global.get(\"siteID\") || \"SiteIDxxx\";\nlet macAddr = global.get(\"macAddr\") || \"NotSet\";\nlet serverVersion = global.get(\"serverVersion\") || \"MONICON-PLC_ServerV0.0.0\"\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload;\n\nmsg.payload = data + \",\" + serverVersion;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "5e8aba1b.25c0f4"
            ]
        ]
    },
    {
        "id": "993c9ce6.6d1d8",
        "type": "mqtt out",
        "z": "96e1bdf8.23a17",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 1430,
        "y": 280,
        "wires": []
    },
    {
        "id": "67739856.98ce28",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Check Server Address",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 500,
        "wires": [
            [
                "2f6f05d.019eefa",
                "8b8550a9.d6477"
            ]
        ]
    },
    {
        "id": "8aa426ea.4c1698",
        "type": "influxdb in",
        "z": "96e1bdf8.23a17",
        "influxdb": "8b183f5.a3f60c",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 890,
        "y": 560,
        "wires": [
            [
                "ab4f6c8d.85fa8"
            ]
        ]
    },
    {
        "id": "ab4f6c8d.85fa8",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "\\n\\r Filter",
        "func": "var data = String(msg.payload[0].last);\ndata = data.replace(/[\\n\\r]+/g, '');\nlet macAddr = global.get(\"macAddr\") || \"nSet\";\nmsg.topic = \"sess/MONICON-PLC/STAT/Query/\" + macAddr;\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1120,
        "y": 500,
        "wires": [
            [
                "c721b5e.c91b748"
            ]
        ]
    },
    {
        "id": "9d7e051.6f9def8",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Add to Query",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\nlet query = msg.payload;\nlet msg1 = {query:  String(query) };\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 560,
        "wires": [
            [
                "c57fb181.ef11",
                "f5309b6d.9fe018"
            ]
        ]
    },
    {
        "id": "c721b5e.c91b748",
        "type": "join",
        "z": "96e1bdf8.23a17",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": ",",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1250,
        "y": 500,
        "wires": [
            [
                "44c12002.4e9ec"
            ]
        ]
    },
    {
        "id": "c57fb181.ef11",
        "type": "delay",
        "z": "96e1bdf8.23a17",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 620,
        "y": 560,
        "wires": [
            [
                "8aa426ea.4c1698"
            ]
        ]
    },
    {
        "id": "d67dac3f.0a46f",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Remote System Status Query",
        "info": "",
        "x": 150,
        "y": 520,
        "wires": []
    },
    {
        "id": "a94b4974.e96fa8",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Set Site ID",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet siteID = msg.payload;\nglobal.set(\"siteID\", siteID);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 680,
        "wires": [
            [
                "b3461df.7362ae"
            ]
        ]
    },
    {
        "id": "6956722d.57fb2c",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Remote Set Site ID",
        "info": "",
        "x": 110,
        "y": 640,
        "wires": []
    },
    {
        "id": "591338c.13404c8",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Remote Set Equipment ID",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "1e2fe0e6.b2fe5f",
        "type": "string",
        "z": "96e1bdf8.23a17",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "7388639d.7a61fc",
                "78ecf0c7.2b6ff"
            ]
        ]
    },
    {
        "id": "78ecf0c7.2b6ff",
        "type": "mqtt out",
        "z": "96e1bdf8.23a17",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "f7159323.b64b6",
        "type": "string",
        "z": "96e1bdf8.23a17",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "78ecf0c7.2b6ff",
                "27264b3e.511564"
            ]
        ]
    },
    {
        "id": "23d84159.1ef2ae",
        "type": "exec",
        "z": "96e1bdf8.23a17",
        "command": "sudo rm /home/pi/Firmware -r",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Delete Firmware Dir",
        "x": 900,
        "y": 1180,
        "wires": [
            [
                "f2aa604c.dd065",
                "4a534fcd.70f6b"
            ],
            [
                "24918fa3.97df2"
            ],
            []
        ]
    },
    {
        "id": "f2aa604c.dd065",
        "type": "exec",
        "z": "96e1bdf8.23a17",
        "command": " sudo git clone https://github.com/jimmy232/Firmware.git",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Download github bin files",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "8e47a313.20a4b"
            ],
            [
                "886325a1.37cfb8"
            ],
            []
        ]
    },
    {
        "id": "afd11cfd.96d9b",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "MONICON-PLC/CMD/DownloadUploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "e16b3578.3f6378"
            ]
        ]
    },
    {
        "id": "e16b3578.3f6378",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Alt Topic",
        "func": "var data = msg.topic\ndata = data.replace(\"DownloadUploadFirmware\", \"UploadFirmware\");\nmsg.topic = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "23d84159.1ef2ae",
                "f3c945f4.b08848"
            ]
        ]
    },
    {
        "id": "5cbf5a15.0a2124",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "2b33652d.8fecca",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "f3acf508.4e36f8",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n    AnalogTimer = \"0\";\n    msg.payload = \"Analog Timer Inactive\";\n} else {\n    global.set(\"AnalogTimer\", \"1\");\n    AnalogTimer = \"1\";\n    msg.payload = \"Analog Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "48ce5302.65bcbc"
            ]
        ]
    },
    {
        "id": "af2cd6ef.b72898",
        "type": "function",
        "z": "96efbfcc.040b3",
        "name": "Check MQTT Timer Enable",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(AnalogTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 120,
        "wires": [
            [
                "2bc5f469.a9ed6c"
            ]
        ]
    },
    {
        "id": "cb266f2f.819ed",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "9464b3e1.480b7",
        "type": "mqtt in",
        "z": "96efbfcc.040b3",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "a3b75914.cc0ff8"
            ]
        ]
    },
    {
        "id": "e0dead7f.57ddb",
        "type": "mqtt in",
        "z": "96efbfcc.040b3",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "a3b75914.cc0ff8"
            ]
        ]
    },
    {
        "id": "97d369c7.3ac708",
        "type": "comment",
        "z": "96efbfcc.040b3",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 260,
        "wires": []
    },
    {
        "id": "be53c792.fe1d48",
        "type": "comment",
        "z": "96efbfcc.040b3",
        "name": "Analog Input Values",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "a3b75914.cc0ff8",
        "type": "function",
        "z": "96efbfcc.040b3",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "2bc5f469.a9ed6c"
            ]
        ]
    },
    {
        "id": "bf9a7745.3e33b8",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n    AlarmTimer = \"0\";\n    msg.payload = \"Alarm Timer Inactive\";\n} else {\n    global.set(\"AlarmTimer\", \"1\");\n    AlarmTimer = \"1\";\n    msg.payload = \"Alarm Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "c32d135c.ed152"
            ]
        ]
    },
    {
        "id": "3ba5304f.d47b1",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "c277528c.ce37d",
        "type": "function",
        "z": "c69a38f8.8b3978",
        "name": "Check MQTT Timer Enable",
        "func": "var AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(AlarmTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 140,
        "wires": [
            [
                "e198e63e.f8fa38"
            ]
        ]
    },
    {
        "id": "4629f580.b1accc",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "b9ab1002.18af1"
            ]
        ]
    },
    {
        "id": "ff6b94f6.6b76d8",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "b9ab1002.18af1"
            ]
        ]
    },
    {
        "id": "b9ab1002.18af1",
        "type": "function",
        "z": "c69a38f8.8b3978",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 560,
        "wires": [
            [
                "e198e63e.f8fa38"
            ]
        ]
    },
    {
        "id": "bc9677f4.f10a18",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Define Email Parameters",
        "info": "",
        "x": 130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "e8c8c7dc.027c68",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Email Parameters",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet parameters = msg.payload.split('+');\n\nif (parameters[5] == \"1\") // PT100 Configuration Parameters\n{\n    global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n    global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n    global.set(\"addrTo_PT100\", parameters[2]);                //String\n    global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n    global.set(\"addrBcc_PT100\", parameters[4]);               //String\n    global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n} else {\n    global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n    global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n    global.set(\"addrTo_4n20\", parameters[2]);                //String\n    global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n    global.set(\"addrBcc_4n20\", parameters[4]);               //String\n    global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1660,
        "wires": [
            [
                "5fc7f904.dce768"
            ]
        ]
    },
    {
        "id": "1ad23e9d.fe7701",
        "type": "function",
        "z": "ffd1475f.49ff98",
        "name": "Email Setup - 4..20mA Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_4n20 = global.get(\"subjectMSg_4n20\") || \"null\";                    //String\nlet bodyMSg_4n20 = global.get(\"bodyMSg_4n20\") || \"null\";                          //String\nlet addrTo_4n20 = global.get(\"addrTo_4n20\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_4n20 = global.get(\"addrCc_4n20\") || \"\";                            //Strng\nlet addrBcc_4n20 = global.get(\"addrBcc_4n20\") || \"\";                          //String\nlet subjectParameters_4n20 = global.get(\"subjectParameters_4n20\") || \"null\";      //String of bools\nlet bodyParameters_4n20 = global.get(\"bodyParameters_4n20\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_4n20.split('=');\nlet bodyPara = bodyParameters_4n20.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_4n20;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - 4n20 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_4n20 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t 4n20 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_4n20,\n    cc: addrCc_4n20,\n    bcc: addrBcc_4n20\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "2a682822.1833f8"
            ]
        ]
    },
    {
        "id": "818d52e7.ae18",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "49e63a8c.ac6cc4"
            ]
        ]
    },
    {
        "id": "f1e3c0d5.87de8",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Query/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 560,
        "wires": [
            [
                "9d7e051.6f9def8"
            ]
        ]
    },
    {
        "id": "8bbf6ff8.17cc2",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/SiteID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "a94b4974.e96fa8"
            ]
        ]
    },
    {
        "id": "2aba10a2.a24b",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpdateEquipID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 840,
        "wires": [
            [
                "1e2fe0e6.b2fe5f"
            ]
        ]
    },
    {
        "id": "2e7a5d1f.d06b22",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "f7159323.b64b6"
            ]
        ]
    },
    {
        "id": "89b5011b.60e89",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1340,
        "wires": []
    },
    {
        "id": "6e216394.6eb73c",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AnalogTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "f3acf508.4e36f8",
                "cb266f2f.819ed"
            ]
        ]
    },
    {
        "id": "2a05899b.f92bf6",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Enable Alarm Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1480,
        "wires": []
    },
    {
        "id": "9e1009b4.cb7338",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AlarmTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "bf9a7745.3e33b8",
                "3ba5304f.d47b1"
            ]
        ]
    },
    {
        "id": "d9c7c2db.ca69f",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailDefinition/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "e8c8c7dc.027c68"
            ]
        ]
    },
    {
        "id": "c4b0a507.09eab8",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Search Email Parameters",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "ae273d66.f2812",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailSearch/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "f8209325.765bb"
            ]
        ]
    },
    {
        "id": "f8209325.765bb",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Email Parameters Template",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = msg.topic.replace(\"CMD\", \"STAT\");\n\nlet message = \"\";\n\nif (msg.payload == \"PT100SensorType\") // PT100 Configuration Parameters\n{\n    message = global.get(\"subjectMSg_PT100\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_PT100\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_PT100\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_PT100\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_PT100\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_PT100\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_PT100\");        //String of bools\n} else {\n    message = global.get(\"subjectMSg_4n20\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_4n20\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_4n20\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_4n20\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_4n20\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_4n20\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_4n20\");        //String of bools    \n}\nmsg.payload = message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "11dc6290.a5f37d",
        "type": "mqtt in",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Reboot/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "67739856.98ce28"
            ]
        ]
    },
    {
        "id": "9e87c4ef.57fba8",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "System Reboot Counter",
        "info": "",
        "x": 120,
        "y": 220,
        "wires": []
    },
    {
        "id": "71e105fe.03e71c",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "System Reboot every 48hrs",
        "info": "",
        "x": 140,
        "y": 340,
        "wires": []
    },
    {
        "id": "aed4dc83.b5ff9",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "Remote Reboot",
        "info": "",
        "x": 100,
        "y": 460,
        "wires": []
    },
    {
        "id": "8b8550a9.d6477",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Return Message",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Server Reboot was Successful.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 500,
        "wires": [
            [
                "d53024b7.075a18"
            ]
        ]
    },
    {
        "id": "565c90e6.c3bff",
        "type": "function",
        "z": "7ecf43eb.bcd3ec",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading Outstation with new File: <\" + msg.filename + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "ca9f0688.583f08"
            ]
        ]
    },
    {
        "id": "5fc7f904.dce768",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Email template loaded successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1660,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "f3c945f4.b08848",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Clearing Server File Directory...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1320,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "4a534fcd.70f6b",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Downloading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1240,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "27264b3e.511564",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "ca4f0ed6.7eba"
            ]
        ]
    },
    {
        "id": "c32d135c.ed152",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1520,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "b3461df.7362ae",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nlet siteID = global.get(\"siteID\", siteID);\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"SiteID updated <\" + siteID + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "44c12002.4e9ec"
            ]
        ]
    },
    {
        "id": "48ce5302.65bcbc",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "f5309b6d.9fe018",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Query on Local Database Executed Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 620,
        "wires": [
            [
                "44c12002.4e9ec"
            ]
        ]
    },
    {
        "id": "7388639d.7a61fc",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"New Equipment ID has been issued to Outstation.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "ca4f0ed6.7eba"
            ]
        ]
    },
    {
        "id": "e8a5a6dc.519528",
        "type": "mqtt out",
        "z": "96e1bdf8.23a17",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 330,
        "y": 2280,
        "wires": []
    },
    {
        "id": "283caf66.fa126",
        "type": "mqtt out",
        "z": "96e1bdf8.23a17",
        "name": "MQTT Cloud",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "4d64fa3d.ad0334",
        "x": 330,
        "y": 2340,
        "wires": []
    },
    {
        "id": "2f2c79e0.3af3c6",
        "type": "link in",
        "z": "96e1bdf8.23a17",
        "name": "MQTT Local | Remote",
        "links": [
            "18cab98.a22cf47",
            "331803a6.7ac7fc",
            "911354a8.543c08",
            "9e968cbf.1e234",
            "ca9f0688.583f08",
            "44c12002.4e9ec",
            "5e8aba1b.25c0f4",
            "d53024b7.075a18",
            "e198e63e.f8fa38",
            "490cc938.895128",
            "b1483d9.b4d3dc",
            "670b4af1.3352e4",
            "8a563660.c01618",
            "8e47a313.20a4b",
            "2bc5f469.a9ed6c",
            "ca4f0ed6.7eba",
            "130088b6.1c4c67",
            "e25579c6.4f04d8",
            "461d356.f8ca4cc",
            "699294a4.9b178c"
        ],
        "x": 195,
        "y": 2300,
        "wires": [
            [
                "283caf66.fa126",
                "e8a5a6dc.519528"
            ]
        ]
    },
    {
        "id": "8e47a313.20a4b",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1575,
        "y": 1400,
        "wires": []
    },
    {
        "id": "ca4f0ed6.7eba",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1415,
        "y": 920,
        "wires": []
    },
    {
        "id": "44c12002.4e9ec",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1395,
        "y": 520,
        "wires": []
    },
    {
        "id": "ca9f0688.583f08",
        "type": "link out",
        "z": "7ecf43eb.bcd3ec",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "d53024b7.075a18",
        "type": "link out",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1255,
        "y": 500,
        "wires": []
    },
    {
        "id": "2bc5f469.a9ed6c",
        "type": "link out",
        "z": "96efbfcc.040b3",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 835,
        "y": 240,
        "wires": []
    },
    {
        "id": "e198e63e.f8fa38",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 935,
        "y": 420,
        "wires": []
    },
    {
        "id": "18cab98.a22cf47",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 795,
        "y": 80,
        "wires": []
    },
    {
        "id": "4bb45557.f51d8c",
        "type": "influxdb batch",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1020,
        "y": 960,
        "wires": []
    },
    {
        "id": "2594d6e0.32854a",
        "type": "link in",
        "z": "be33cc6.affea3",
        "name": "Local InfluxDB",
        "links": [
            "ad4ac9ab.eadc88",
            "a68fef67.18802",
            "8fd3e33c.936cf",
            "8894ce36.cac78",
            "6035d22e.260aec",
            "b146dbb7.02a828",
            "2df71e1.2d013e2",
            "1628eea3.8519d1",
            "25bd426f.10212e",
            "1e4011b5.b9818e"
        ],
        "x": 35,
        "y": 960,
        "wires": [
            [
                "4bb45557.f51d8c"
            ]
        ]
    },
    {
        "id": "9d0fefe6.c1a6f",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "Local InfluxDb Link",
        "info": "",
        "x": 150,
        "y": 940,
        "wires": []
    },
    {
        "id": "a2dbda34.dea2e8",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "be33cc6.affea3",
        "server": "da535876.280af8",
        "name": "SESS",
        "x": 930,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "9323315a.5b136",
        "type": "link in",
        "z": "be33cc6.affea3",
        "name": "Remote FluxDB",
        "links": [
            "f9b7214b.9bdca",
            "d819a2b6.7e531",
            "9a038e99.ed9ba",
            "bf9b0de1.7738e",
            "e6517a6a.cbbd78",
            "25bd3a1a.9c8846",
            "e9adf226.f0b55",
            "988e7055.754ee",
            "269664b1.608cdc"
        ],
        "x": 35,
        "y": 1040,
        "wires": [
            [
                "a2dbda34.dea2e8"
            ]
        ]
    },
    {
        "id": "52309cc8.3eae44",
        "type": "inject",
        "z": "98a15ed9.8e1d5",
        "name": "MoniconPLC-Server003V0.1.5",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MoniconPLC-Server003V0.1.5",
        "payloadType": "str",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "41c6ea7e.f2a804"
            ]
        ]
    },
    {
        "id": "19be84ff.1e002b",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "Set Server Version",
        "info": "",
        "x": 110,
        "y": 120,
        "wires": []
    },
    {
        "id": "1b879dd8.0df5b2",
        "type": "mqtt in",
        "z": "be33cc6.affea3",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/DeleteCreateLocalDB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "1889cca5.08db43"
            ]
        ]
    },
    {
        "id": "511ec6a6.fe9e58",
        "type": "delay",
        "z": "be33cc6.affea3",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 560,
        "y": 240,
        "wires": [
            [
                "679ce809.efcc18"
            ]
        ]
    },
    {
        "id": "1889cca5.08db43",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Database has been reset.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "4189a1b4.00ca1",
                "511ec6a6.fe9e58",
                "130088b6.1c4c67"
            ]
        ]
    },
    {
        "id": "130088b6.1c4c67",
        "type": "link out",
        "z": "be33cc6.affea3",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 815,
        "y": 160,
        "wires": []
    },
    {
        "id": "3e15706b.fa4e",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "36a6ab05.845a44",
                "8888e0cb.544ea"
            ]
        ]
    },
    {
        "id": "8aee0150.6cf02",
        "type": "mqtt in",
        "z": "c69a38f8.8b3978",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "db4056ce.3604f8",
                "8888e0cb.544ea"
            ]
        ]
    },
    {
        "id": "36a6ab05.845a44",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "L-Thres_PT100-Para",
        "links": [],
        "x": 475,
        "y": 680,
        "wires": []
    },
    {
        "id": "db4056ce.3604f8",
        "type": "link out",
        "z": "c69a38f8.8b3978",
        "name": "L-Thres_4n20-Para",
        "links": [
            "7010bf18.67104"
        ],
        "x": 475,
        "y": 800,
        "wires": []
    },
    {
        "id": "8888e0cb.544ea",
        "type": "function",
        "z": "c69a38f8.8b3978",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "e198e63e.f8fa38"
            ]
        ]
    },
    {
        "id": "5e8aba1b.25c0f4",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 575,
        "y": 80,
        "wires": []
    },
    {
        "id": "46629921.7aef28",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "GLOBAL DEVICE SEARCH",
        "info": "",
        "x": 140,
        "y": 220,
        "wires": []
    },
    {
        "id": "4340a6b8.0dd328",
        "type": "mqtt in",
        "z": "96efbfcc.040b3",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "3471b448.aa72ec"
            ]
        ]
    },
    {
        "id": "a9f80d5a.0a688",
        "type": "mqtt in",
        "z": "96efbfcc.040b3",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "3471b448.aa72ec"
            ]
        ]
    },
    {
        "id": "be66c0a9.fdd5a",
        "type": "comment",
        "z": "96efbfcc.040b3",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "3471b448.aa72ec",
        "type": "function",
        "z": "96efbfcc.040b3",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 540,
        "wires": [
            [
                "2bc5f469.a9ed6c"
            ]
        ]
    },
    {
        "id": "15e3d140.d3ddcf",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Poll Cycle Times",
        "info": "",
        "x": 120,
        "y": 1840,
        "wires": []
    },
    {
        "id": "26e6f00f.c2248",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "MONICON-PLC/STAT/TenSecondLoopLimit/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "9c95ad5f.84961"
            ]
        ]
    },
    {
        "id": "9c95ad5f.84961",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1880,
        "wires": [
            [
                "8a563660.c01618"
            ]
        ]
    },
    {
        "id": "8a563660.c01618",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 735,
        "y": 1880,
        "wires": []
    },
    {
        "id": "2d136a78.74e0a6",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Task Complete Messages",
        "info": "",
        "x": 150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "860c15f.433cfe8",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "MONICON-PLC/STAT/RespondMessages/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "c9a871d9.ede82"
            ]
        ]
    },
    {
        "id": "c9a871d9.ede82",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1980,
        "wires": [
            [
                "9e968cbf.1e234"
            ]
        ]
    },
    {
        "id": "9e968cbf.1e234",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 735,
        "y": 1980,
        "wires": []
    },
    {
        "id": "59e6a41e.56fedc",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 220,
        "y": 2040,
        "wires": []
    },
    {
        "id": "bc96f2f8.10dd",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 210,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "c19f6e4a.1cf4f",
        "type": "exec",
        "z": "96e1bdf8.23a17",
        "command": "sudo /home/pi/JC/grafanaGithubSetup.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Update Local Grafana Dashboard ",
        "x": 840,
        "y": 2080,
        "wires": [
            [
                "fd80b026.f7aec"
            ],
            [
                "7c929f7a.0a35d"
            ],
            []
        ]
    },
    {
        "id": "2f653ea5.a9d412",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "Check Server",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2080,
        "wires": [
            [
                "c19f6e4a.1cf4f"
            ]
        ]
    },
    {
        "id": "fd80b026.f7aec",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Grafana Updated Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2100,
        "wires": [
            [
                "490cc938.895128"
            ]
        ]
    },
    {
        "id": "490cc938.895128",
        "type": "link out",
        "z": "96e1bdf8.23a17",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1255,
        "y": 2100,
        "wires": []
    },
    {
        "id": "895d527c.19852",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 2140,
        "wires": [
            [
                "2f653ea5.a9d412"
            ]
        ]
    },
    {
        "id": "7c929f7a.0a35d",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2160,
        "wires": [
            [
                "490cc938.895128"
            ]
        ]
    },
    {
        "id": "24918fa3.97df2",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1280,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "886325a1.37cfb8",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1450,
        "y": 1180,
        "wires": [
            [
                "8e47a313.20a4b"
            ]
        ]
    },
    {
        "id": "6cb4af81.1ff3",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 400,
        "wires": [
            [
                "44c12002.4e9ec"
            ]
        ]
    },
    {
        "id": "7248732d.ccce7c",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 380,
        "wires": [
            [
                "d53024b7.075a18"
            ]
        ]
    },
    {
        "id": "709836dd.5931e8",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "Download Scripts",
        "info": "",
        "x": 100,
        "y": 700,
        "wires": []
    },
    {
        "id": "a4a64d4d.476d4",
        "type": "mqtt in",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Scripts/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 160,
        "y": 740,
        "wires": [
            [
                "7e2e1d54.a1ebc4"
            ]
        ]
    },
    {
        "id": "7e2e1d54.a1ebc4",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Scripting",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n//let directory = \"MONICON\";\n\n//var data = \"sudo find /home/pi/ -type d -name 'MONICON/Scripts' -exec rm -r {} +;\"\nvar data = \"sudo rm -r /home/pi/MONICON/Scripts;\"\ndata = data.concat(\"sudo git clone https://github.com/jimmy232/MoniconPLC_Scripts.git /home/pi/MONICON/Scripts/;\");\ndata = data.concat(\"sudo chmod +x /home/pi/MONICON/Scripts/*.sh;\");\ndata = data.concat(\"sudo /home/pi/MONICON/Scripts/\" + msg.payload + \";\");\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 740,
        "wires": [
            [
                "58de2b05.534e54",
                "4ac15a3.f36dda4",
                "f35094cd.ebed88"
            ]
        ]
    },
    {
        "id": "58de2b05.534e54",
        "type": "exec",
        "z": "98a15ed9.8e1d5",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 740,
        "wires": [
            [
                "8622b542.1efe38"
            ],
            [
                "8622b542.1efe38"
            ],
            [
                "8622b542.1efe38",
                "44c32735.3ae928"
            ]
        ]
    },
    {
        "id": "8622b542.1efe38",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length == 0) {\n    msg.payload == \"Empty Msg\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 740,
        "wires": [
            [
                "911354a8.543c08"
            ]
        ]
    },
    {
        "id": "44c32735.3ae928",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nif(msg.payload.code === 0) {\n    msg.payload = \"Script-Finished\";\n} else {\n    msg.payload = \"Script-Failed\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 780,
        "wires": [
            [
                "911354a8.543c08"
            ]
        ]
    },
    {
        "id": "911354a8.543c08",
        "type": "link out",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1195,
        "y": 900,
        "wires": []
    },
    {
        "id": "4ac15a3.f36dda4",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length === 0) {\n    msg.payload == \"Empty Msg\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 860,
        "wires": [
            [
                "911354a8.543c08"
            ]
        ]
    },
    {
        "id": "f35094cd.ebed88",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Running Scripts...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 900,
        "wires": [
            [
                "911354a8.543c08"
            ]
        ]
    },
    {
        "id": "a98f90bd.3d449",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalOutputStatus/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "ce60c96d.c52c78",
                "725470f6.b0791",
                "e1e9592b.7b98e8"
            ]
        ]
    },
    {
        "id": "d126a318.21eda",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Digital Output Status",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "ce60c96d.c52c78",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 580,
        "wires": [
            [
                "670b4af1.3352e4"
            ]
        ]
    },
    {
        "id": "670b4af1.3352e4",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 795,
        "y": 580,
        "wires": []
    },
    {
        "id": "64ed1b9b.a8ac34",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/ENG/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "12327024.960ed"
            ]
        ]
    },
    {
        "id": "12327024.960ed",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "ENG => CMD",
        "func": "msg.topic = msg.topic.replace(\"ENG\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "b6ee6265.1202b"
            ]
        ]
    },
    {
        "id": "69000640.55adc8",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "sess/MONICON-PLC/PUB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 440,
        "wires": [
            [
                "1e1ddacb.4104c5"
            ]
        ]
    },
    {
        "id": "1e1ddacb.4104c5",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "PUB => CMD",
        "func": "msg.topic = msg.topic.replace(\"PUB\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 440,
        "wires": [
            [
                "b6ee6265.1202b"
            ]
        ]
    },
    {
        "id": "2bd384ba.70f3fc",
        "type": "comment",
        "z": "96e1bdf8.23a17",
        "name": "MASTER MQTT LINK",
        "info": "",
        "x": 140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "bbe6a11c.95e46",
        "type": "inject",
        "z": "ee92260d.8ac618",
        "name": "Accumulator",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "5ada5b96.8391a4"
            ]
        ]
    },
    {
        "id": "5ada5b96.8391a4",
        "type": "function",
        "z": "ee92260d.8ac618",
        "name": "AccumulatorRequest 24hr",
        "func": "//var hour = new Date().getHours();\n//if (hour === 0) {\n    for (var r = 0; r < 7; r++) {\n            msg.topic = \"MONICON-PLC/CMD/AccumulatorRequest/\";\n            msg.payload = String(r);\n            node.send(msg);\n       \n    }\n    // for (var c = 0; c < 7; c++) {\n    //         msg.topic = \"MONICON-PLC/CMD/AccumulatorClear/\";\n    //         msg.payload = String(c);\n    //         node.send(msg);\n       \n    // }\n//}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "e1d1f186.ccbd8"
            ]
        ]
    },
    {
        "id": "b45512ab.1edc4",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorOne/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "9fe67cf.d8b4c8",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorTwo/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "fbb5ca8c.420ca8",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorThree/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "1f2003db.b88efc",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFour/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "754fcb24.3f90a4",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFive/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "95db57ff.d378f8",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSix/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "b75df0af.dada4",
        "type": "mqtt in",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSeven/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "189f4f3f.283a41"
            ]
        ]
    },
    {
        "id": "e1d1f186.ccbd8",
        "type": "mqtt out",
        "z": "ee92260d.8ac618",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "189f4f3f.283a41",
        "type": "link out",
        "z": "ee92260d.8ac618",
        "name": "Accumulators",
        "links": [
            "ce7e2694.e60698"
        ],
        "x": 795,
        "y": 240,
        "wires": []
    },
    {
        "id": "ce7e2694.e60698",
        "type": "link in",
        "z": "be33cc6.affea3",
        "name": "",
        "links": [
            "189f4f3f.283a41"
        ],
        "x": 35,
        "y": 780,
        "wires": [
            [
                "adfa5387.0ea6b",
                "a0da12ec.d545f"
            ]
        ]
    },
    {
        "id": "a0da12ec.d545f",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[0]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 820,
        "wires": [
            [
                "af953945.bb67e8"
            ]
        ]
    },
    {
        "id": "adfa5387.0ea6b",
        "type": "function",
        "z": "be33cc6.affea3",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t},\n        tags:{\n            PLC: output[0] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 780,
        "wires": [
            [
                "817f1506.9f7e98"
            ]
        ]
    },
    {
        "id": "af953945.bb67e8",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "be33cc6.affea3",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "817f1506.9f7e98",
        "type": "influxdb batch",
        "z": "be33cc6.affea3",
        "influxdb": "8b183f5.a3f60c",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 1020,
        "y": 780,
        "wires": []
    },
    {
        "id": "12285c7a.72a674",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "Accumulators Link",
        "info": "",
        "x": 110,
        "y": 740,
        "wires": []
    },
    {
        "id": "f244a6c2.350778",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Check Timers",
        "func": "/////////////// Splict message into an array ///////////////\n//var data = msg.payload.split(\",\");\n//data[0] = id\n//data[1] = sw\n//data[2] = type\n//data[3] = index\n//data[4] = action\n//data[5] = milliseconds(onTime)\n//data[6] = milliseconds(offTime)\n//data[7] = repeat\n//data[8] = enable\n//data[9] = RoomName/SwitchName\n\nvar digitalOutputID = 0;\n\nvar timerArray = flow.get(\"timers\") || null;\n\nif(timerArray === null) {\n    return;\n}\n\nif (Object.keys(timerArray).length === 0 ) {\n    return;\n}\n\n\nvar currentTime = new Date().getTime();\n\n/////////////// Action Manifold ///////////////\nfor (let [key, value] of Object.entries(timerArray.id)) {\n    let serial = key;\n    \n    //msg.payload = key;\n    //node.send(msg);\n    \n    for (let [key, value] of Object.entries(timerArray.id[serial].index)) {\n\n        actionSelection(value, serial);\n        \n        // msg.payload = value;\n        // node.send(msg);\n    }\n}\n\nfunction actionSelection(value, serial) {\n    if (value.action == \"On\" ) {\n    } \n    else if (value.action == \"Off\") {\n    }\n    else if (value.action == \"ON/OFF\" ) {\n        timerList(value, serial);\n    }\n}\n\nfunction timerList(value, serial) {\n    \n    if(value.type == \"LightPro\") {\n        if(value.sw == \"sw0\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 0;\n        } \n        else if (value.sw == \"sw1\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial; \n            digitalOutputID = 1;\n        } else {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 2;\n        }\n    } else {\n        msg.topic = \"sess/MONICON-PLC/CMD/RELAY/\" + serial;\n    }\n\n    if (value.on.trig == \"1\" && checkTime(value.on.time)) {\n        if (value.repeat == \"1\") {\n            value.on.trig = \"1\";\n            value.on.time = DateCalculator(value.on.time); // Add 60 seconds\n            value.on.seconds = String(new Date(value.on.time).getTime());\n            msg.date = value.on.time;\n        } else {\n            value.on.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 1;\n        \n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n    if (value.off.trig == \"1\" && checkTime(value.off.time)) {\n        if (value.repeat == \"1\") {\n            value.off.trig = \"1\";\n            value.off.time = DateCalculator(value.off.time); // Add 60 seconds\n            value.off.seconds = String(new Date(value.off.time).getTime());\n            msg.date = value.off.time;\n        } else {\n            value.off.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 0;\n\n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n}\n\nfunction DateCalculator(time) {\n    //msg.payload = time\n    //return msg\n    var thisTime = new Date(time);\n    \n    thisTime.setHours(thisTime.getHours());\n    thisTime.setMinutes(thisTime.getMinutes());\n    thisTime.setSeconds(0);\n\n    //thisTime.setDate(new Date().getDate() + 1);\n    thisTime.setDate(new Date().getDate())\n    thisTime.setMonth(new Date().getMonth());\n    thisTime.setFullYear(new Date().getFullYear());\n    \n    var milliSeconds = thisTime.getTime() + 86400000;\n    \n    thisTime = new Date(milliSeconds);\n    \n    return thisTime;\n}\n\nfunction checkTime(time) {\n    if (new Date(time).getTime() < new Date().getTime()) {\n        return true\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "1a0413b2.8ceb2c"
            ]
        ]
    },
    {
        "id": "4489b34a.85ea3c",
        "type": "inject",
        "z": "94d394af.e973c8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "f244a6c2.350778"
            ]
        ]
    },
    {
        "id": "847a1865.ea3318",
        "type": "comment",
        "z": "94d394af.e973c8",
        "name": "Check Existing Alarms",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "c7ab3a0e.ea37b8",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Create",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\n// var data = [];\n// data[0] = \"9020802\"                     //id\n// data[1] = \"sw1\"                         //sw\n// data[2] = \"LightPro\"                    //type\n// data[3] = \"0\"                           //index\n// data[4] = \"On/Off\"                      //action\n// data[5] = \"2020/04/16 19:30\"            //milliseconds(onTime)\n// data[6] = \"2020/04/16 19:32\"            //milliseconds(offTime)\n// data[7] = \"1\"                           //repeat\n// data[8] = \"1\"                           //enable\n// data[9] = \"Master Bedroom/Light\"        //RoomName/SwitchName\n\nlet t1 = new Date(new Date(parseInt(data[5])));\nlet t2 = new Date(new Date(parseInt(data[6])));\n\n// let t1 = new Date(new Date().getTime() + 300000);\n// let t2 = new Date(new Date().getTime() + 30000);\n\nvar timer = flow.get(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\") || { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[6] }, off:{trig:data[8], time: t2, seconds: data[5] }, repeat: data[7], state: data[8], name: data[9] } ; \n\ntimer = { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[5] }, off:{trig:data[8], time: t2, seconds: data[6] }, repeat: data[7], state: data[8], name: data[9] } ; \n\nflow.set(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\", timer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "9d1f6fbd.ffb8a",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Delete",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\nlet id = String(data[0])\nlet sw = data[1]\nlet index = String(data[2])\n\n/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\ndelete timer.id[id].index[index]\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "b6757bd9.cb90a8",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "",
        "func": "/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\nvar obj = timer.id[msg.payload];\nmsg.topic = \"sess/MONICON-PLC/STAT/GetTimers/\" + msg.payload;\n\n/////////////// If Object doesn't exist, send empty object ///////////////\n// if(obj === undefined) {\n//     msg = {payload: {  }, topic: msg.topic};\n//     msg.topic = \"\"\n//     return ;\n// }\n// /////////////// Send Timer Object ///////////////\n// else {\n    var msg1 = { payload: obj, topic: msg.topic };\n\n    return msg1;\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 300,
        "wires": [
            [
                "551c6191.74444"
            ]
        ]
    },
    {
        "id": "74a27ec0.1c5c",
        "type": "mqtt in",
        "z": "94d394af.e973c8",
        "name": "",
        "topic": "MONICON-PLC/CMD/setTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "91c757bf.3392a8"
            ]
        ]
    },
    {
        "id": "1a0413b2.8ceb2c",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Return Timers",
        "func": "var cmd = msg.payload.split(\",\");\nif(cmd[1] === \"1\" || cmd[1] === \"0\") {\n    // Update iOS device timer list\nvar msg1 = { payload: msg.id, topic: \"sess/MONICON-PLC/CMD/GetTimers/\" };\n    // Send Notification to user\nvar msg2 = { payload: msg.id + \",MONICON,\" + msg.name + \",\" + msg.payload, topic: \"sess/MONICON-PLC/STAT/Timers/Alert/\" };\n    // Send Command to Monicon device\nvar msg3 = { payload: msg.payload, topic: msg.topic };\n\nreturn [msg1, msg2, msg3]\n\n}\n\nreturn",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "b1483d9.b4d3dc"
            ],
            [
                "b1483d9.b4d3dc"
            ],
            [
                "b1483d9.b4d3dc"
            ]
        ]
    },
    {
        "id": "7a288629.a39058",
        "type": "mqtt in",
        "z": "94d394af.e973c8",
        "name": "",
        "topic": "MONICON-PLC/CMD/DeleteTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "ef1bb5f3.444728"
            ]
        ]
    },
    {
        "id": "2f2ffa9e.d78e16",
        "type": "mqtt in",
        "z": "94d394af.e973c8",
        "name": "",
        "topic": "MONICON-PLC/CMD/GetTimers/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "a1be6826.254c08"
            ]
        ]
    },
    {
        "id": "b25765ce.ee1078",
        "type": "delay",
        "z": "94d394af.e973c8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "b6757bd9.cb90a8"
            ]
        ]
    },
    {
        "id": "551c6191.74444",
        "type": "json",
        "z": "94d394af.e973c8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "b1483d9.b4d3dc"
            ]
        ]
    },
    {
        "id": "b1483d9.b4d3dc",
        "type": "link out",
        "z": "94d394af.e973c8",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1135,
        "y": 120,
        "wires": []
    },
    {
        "id": "2d140ae7.0c7b46",
        "type": "inject",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0,1",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "ec08a594.247698",
                "e2667f87.0902d"
            ]
        ]
    },
    {
        "id": "ec08a594.247698",
        "type": "mqtt out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/4164319659",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "96c5d2b0.1b75",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "1e1cccca.84f093",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "94b1b04.1b36f5",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "2e126073.5d65c",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "1708ac61.8c80b4",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "b1c51b12.0dd1f8",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "e771c683.90d3a8",
        "type": "mqtt in",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 440,
        "wires": [
            [
                "120bd80e.6c9368",
                "2f3591aa.67340e",
                "59c35891.6d2698"
            ]
        ]
    },
    {
        "id": "f3c55b4a.ef9618",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Digital Input - Status Change",
        "info": "",
        "x": 1220,
        "y": 40,
        "wires": []
    },
    {
        "id": "120bd80e.6c9368",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nmsg.topic = msg.topic.replace(\"DigitalInputStatus\", \"DigitalInputs\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 80,
        "wires": [
            [
                "331803a6.7ac7fc"
            ]
        ]
    },
    {
        "id": "331803a6.7ac7fc",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1875,
        "y": 80,
        "wires": []
    },
    {
        "id": "e2667f87.0902d",
        "type": "mqtt out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/1010989483",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 800,
        "wires": []
    },
    {
        "id": "b4baf6cb.d509d8",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Enable Digital Status Change Publishing",
        "info": "",
        "x": 180,
        "y": 760,
        "wires": []
    },
    {
        "id": "9cebe994.d1ab48",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "------- Global Logging Connection ------- ",
        "info": "",
        "x": 170,
        "y": 900,
        "wires": []
    },
    {
        "id": "e8ac4b82.11d558",
        "type": "comment",
        "z": "be33cc6.affea3",
        "name": "Remote FluxDb Link",
        "info": "",
        "x": 150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "e1e9592b.7b98e8",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[3]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tDigital_00: parseFloat(output[0]),\n\t\t\t\tDigital_01: parseFloat(output[1]),\n\t\t\t\tDigital_02: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 660,
        "wires": [
            [
                "e9adf226.f0b55"
            ]
        ]
    },
    {
        "id": "725470f6.b0791",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tDigitalOutput_00: parseFloat(output[0]),\n\t\t\tDigitalOutput_01: parseFloat(output[1]),\n\t\t\tDigitalOutput_02: parseFloat(output[2])\n\t\t},\n        tags:{\n            PLC: output[3] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "8894ce36.cac78"
            ]
        ]
    },
    {
        "id": "8894ce36.cac78",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "2594d6e0.32854a"
        ],
        "x": 795,
        "y": 620,
        "wires": []
    },
    {
        "id": "e9adf226.f0b55",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "9323315a.5b136"
        ],
        "x": 795,
        "y": 660,
        "wires": []
    },
    {
        "id": "121680e7.4d021f",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "b39da490.99b968",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "a23d8007.cbabb",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "59c35891.6d2698",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 440,
        "wires": [
            [
                "bf9b0de1.7738e"
            ]
        ]
    },
    {
        "id": "2f3591aa.67340e",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "6035d22e.260aec"
            ]
        ]
    },
    {
        "id": "6035d22e.260aec",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "2594d6e0.32854a"
        ],
        "x": 1875,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf9b0de1.7738e",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "9323315a.5b136"
        ],
        "x": 1875,
        "y": 440,
        "wires": []
    },
    {
        "id": "56ce1513.6a7c2c",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Database | Local",
        "info": "",
        "x": 1980,
        "y": 260,
        "wires": []
    },
    {
        "id": "6dac710a.848e1",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Database | Remote",
        "info": "",
        "x": 1990,
        "y": 440,
        "wires": []
    },
    {
        "id": "ee3e23aa.ca761",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 2020,
        "y": 80,
        "wires": []
    },
    {
        "id": "87240409.e50aa8",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 440,
        "wires": [
            [
                "f9b7214b.9bdca"
            ]
        ]
    },
    {
        "id": "ed3b1d08.54e0e",
        "type": "function",
        "z": "b5b8c3ea.f445a",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "b146dbb7.02a828"
            ]
        ]
    },
    {
        "id": "b146dbb7.02a828",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "2594d6e0.32854a"
        ],
        "x": 795,
        "y": 260,
        "wires": []
    },
    {
        "id": "f9b7214b.9bdca",
        "type": "link out",
        "z": "b5b8c3ea.f445a",
        "name": "",
        "links": [
            "9323315a.5b136"
        ],
        "x": 795,
        "y": 440,
        "wires": []
    },
    {
        "id": "4745aa20.21a394",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "2860532d.fcadcc",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "842d9dd6.8c795",
        "type": "comment",
        "z": "b5b8c3ea.f445a",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "a7e34017.b5ce9",
        "type": "inject",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Server_Heartbeat",
        "payload": "*",
        "payloadType": "str",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "eb9bf19c.14734",
                "14ac6c6f.b09454"
            ]
        ]
    },
    {
        "id": "14ac6c6f.b09454",
        "type": "trigger",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "bc5bb61e.6d2bc8",
                "aaaeb52a.1c02d8"
            ]
        ]
    },
    {
        "id": "bc5bb61e.6d2bc8",
        "type": "rpi-gpio out",
        "z": "2dfef0ab.ecafb",
        "name": "Heartbeat Server - GPIO18",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "8eb7924c.f1814",
        "type": "mqtt in",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "topic": "MONICON-PLC/CMD/Heartbeat/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "ca5689ec.76beb8"
            ]
        ]
    },
    {
        "id": "a03c9126.011bb",
        "type": "trigger",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2.5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "96d8a872.c753d8"
            ]
        ]
    },
    {
        "id": "8f08b743.783dc8",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "e9addf8d.4a2ec",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "cf32731d.f25ed",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"Heartbeat\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "e6517a6a.cbbd78"
            ]
        ]
    },
    {
        "id": "887290b9.53bc5",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"OS\",\n\n        fields: {\n\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            System: \"Heartbeat\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "5b7a8439.190dac"
            ]
        ]
    },
    {
        "id": "5b7a8439.190dac",
        "type": "link out",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "links": [
            "2594d6e0.32854a"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "e6517a6a.cbbd78",
        "type": "link out",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "links": [
            "9323315a.5b136"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "762b375.8ac45c8",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Database | Local",
        "info": "",
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "a8955a93.a530c8",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Database | Remote",
        "info": "",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "96d8a872.c753d8",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Formatting",
        "func": "msg.topic = \"PLC_Heartbeat\";\nflow.set(\"PLC_Heartbeat\", \"1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "887290b9.53bc5",
                "cf32731d.f25ed"
            ]
        ]
    },
    {
        "id": "aaaeb52a.1c02d8",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Formatting",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "cf32731d.f25ed",
                "887290b9.53bc5"
            ]
        ]
    },
    {
        "id": "ca5689ec.76beb8",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "MoniconPLC-1",
        "func": "if(msg.payload == \"MoniconPLC-1\") {\n    return msg;\n} else {\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "a03c9126.011bb"
            ]
        ]
    },
    {
        "id": "efcd6d1e.7af5b",
        "type": "trigger",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "bc5bb61e.6d2bc8"
            ]
        ]
    },
    {
        "id": "eb9bf19c.14734",
        "type": "delay",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "efcd6d1e.7af5b"
            ]
        ]
    },
    {
        "id": "2ab6a25e.95c2ee",
        "type": "rpi-gpio out",
        "z": "2dfef0ab.ecafb",
        "name": "Heartbeat Server - GPIO18",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1240,
        "y": 560,
        "wires": []
    },
    {
        "id": "5f954b3e.115b74",
        "type": "trigger",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "2ab6a25e.95c2ee",
                "bfe595f.79e9968",
                "783bad64.deae84"
            ]
        ]
    },
    {
        "id": "b56c0780.ea3cb8",
        "type": "rpi-gpio in",
        "z": "2dfef0ab.ecafb",
        "name": "Safe Shutdown - Panel Button GPIO16",
        "pin": "36",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "6101a6bf.9f9d68",
                "e2a2ee10.d50d"
            ]
        ]
    },
    {
        "id": "e2a2ee10.d50d",
        "type": "delay",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 640,
        "y": 560,
        "wires": [
            [
                "5f954b3e.115b74"
            ]
        ]
    },
    {
        "id": "a0584fef.8cc2f",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "e2a2ee10.d50d"
            ]
        ]
    },
    {
        "id": "9ed9b9b8.a79868",
        "type": "delay",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "a0584fef.8cc2f"
            ]
        ]
    },
    {
        "id": "6101a6bf.9f9d68",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Reset",
        "func": "if (msg.payload === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 560,
        "wires": [
            [
                "9ed9b9b8.a79868"
            ]
        ]
    },
    {
        "id": "c5bd5e75.04bfa",
        "type": "exec",
        "z": "2dfef0ab.ecafb",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "bfe595f.79e9968",
        "type": "delay",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "c5bd5e75.04bfa"
            ]
        ]
    },
    {
        "id": "c1eee41f.991938",
        "type": "link out",
        "z": "2dfef0ab.ecafb",
        "name": "Reset",
        "links": [
            "dc8f32ca.d7bf5"
        ],
        "x": 1135,
        "y": 500,
        "wires": []
    },
    {
        "id": "783bad64.deae84",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "c1eee41f.991938"
            ]
        ]
    },
    {
        "id": "dc8f32ca.d7bf5",
        "type": "link in",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "links": [
            "c1eee41f.991938"
        ],
        "x": 275,
        "y": 80,
        "wires": [
            [
                "efcd6d1e.7af5b",
                "eb9bf19c.14734",
                "14ac6c6f.b09454"
            ]
        ]
    },
    {
        "id": "316c492c.7f9d86",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Reset",
        "info": "",
        "x": 90,
        "y": 80,
        "wires": []
    },
    {
        "id": "bcbaa0a2.f6a0d",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Reset",
        "info": "",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "25150152.62472e",
        "type": "rpi-gpio out",
        "z": "2dfef0ab.ecafb",
        "name": "Fan - GPIO12",
        "pin": "32",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "7bc585c5.590c4c",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Fan Temperature Control - OS Output",
        "info": "",
        "x": 190,
        "y": 740,
        "wires": []
    },
    {
        "id": "f7526553.0e4af8",
        "type": "link in",
        "z": "2dfef0ab.ecafb",
        "name": "Fan Controller",
        "links": [
            "4df6766.7dbdc88"
        ],
        "x": 55,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "bf48f467.ff5c08",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Temperature Threshold",
        "func": "// Check Temperature Thresholds\nif (msg.payload > 55) {\n    msg.payload = 1;\n    return msg;\n} else if (msg.payload < 50) {\n    msg.payload = 0; \n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 780,
        "wires": [
            [
                "25150152.62472e"
            ]
        ]
    },
    {
        "id": "58443221.64ca2c",
        "type": "trigger",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 600,
        "wires": [
            [
                "461d356.f8ca4cc"
            ]
        ]
    },
    {
        "id": "1fd993f2.8a72ac",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "Remote Reboot CMD - Esp32 Physical Reboot",
        "info": "",
        "x": 200,
        "y": 580,
        "wires": []
    },
    {
        "id": "f8a4177e.7a86a8",
        "type": "mqtt in",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/APM/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "d18b2f8d.0d455",
        "x": 160,
        "y": 620,
        "wires": [
            [
                "563b0563.37a9cc"
            ]
        ]
    },
    {
        "id": "563b0563.37a9cc",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar msg1 = {payload: \"*\", topic: \"MONICON-PLC/CMD/APM/\" + msg.payload};\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"PLC Reboot was Successful.\"\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 620,
        "wires": [
            [
                "58443221.64ca2c"
            ],
            [
                "b73c67cb.15f538"
            ]
        ]
    },
    {
        "id": "461d356.f8ca4cc",
        "type": "link out",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "links": [
            "2f2c79e0.3af3c6"
        ],
        "x": 1015,
        "y": 600,
        "wires": []
    },
    {
        "id": "b73c67cb.15f538",
        "type": "mqtt out",
        "z": "98a15ed9.8e1d5",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "d18b2f8d.0d455",
        "x": 810,
        "y": 640,
        "wires": []
    },
    {
        "id": "a1be6826.254c08",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "b25765ce.ee1078"
            ]
        ]
    },
    {
        "id": "ef1bb5f3.444728",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "9d1f6fbd.ffb8a"
            ]
        ]
    },
    {
        "id": "91c757bf.3392a8",
        "type": "function",
        "z": "94d394af.e973c8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 180,
        "wires": [
            [
                "c7ab3a0e.ea37b8"
            ]
        ]
    },
    {
        "id": "41c6ea7e.f2a804",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Set Server Version",
        "func": "// eg. \"MONICON-PLC_ServerV0.1.1\"\nglobal.set(\"serverVersion\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            [
                "5d9e6765.f31a38"
            ]
        ]
    },
    {
        "id": "aef0a6fe.33f5a8",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nreturn\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "5d9e6765.f31a38",
        "type": "exec",
        "z": "98a15ed9.8e1d5",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 770,
        "y": 160,
        "wires": [
            [
                "aef0a6fe.33f5a8"
            ],
            [],
            []
        ]
    },
    {
        "id": "3593958e.c4c7ca",
        "type": "debug",
        "z": "7ecf43eb.bcd3ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "d5403d7a.c6b6f",
        "type": "rpi-gpio out",
        "z": "2dfef0ab.ecafb",
        "name": "SIXFAB HAT POWER PIN - GPIO26",
        "pin": "37",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "f48e3e0.272dfc",
        "type": "http request",
        "z": "2dfef0ab.ecafb",
        "name": "Internet Check",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://google.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 260,
        "y": 900,
        "wires": [
            [
                "5ce6e6ae.eda768"
            ]
        ]
    },
    {
        "id": "48b47be.035ce84",
        "type": "inject",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "f48e3e0.272dfc"
            ]
        ]
    },
    {
        "id": "5ce6e6ae.eda768",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Reset SIXFAB HAT",
        "func": "if(msg.statusCode != 200) {\n    msg.payload = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "d5403d7a.c6b6f",
                "4afbf193.c6bfb"
            ]
        ]
    },
    {
        "id": "644cae78.ddf9e",
        "type": "exec",
        "z": "2dfef0ab.ecafb",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 1180,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "e73fc3bf.43ee8",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Check Internet Connection every Hour",
        "info": "",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "4afbf193.c6bfb",
        "type": "delay",
        "z": "2dfef0ab.ecafb",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 680,
        "y": 900,
        "wires": [
            [
                "34f36733.391468"
            ]
        ]
    },
    {
        "id": "34f36733.391468",
        "type": "exec",
        "z": "2dfef0ab.ecafb",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/unbind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Unbind",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "c6af3171.88828"
            ],
            [],
            []
        ]
    },
    {
        "id": "c6af3171.88828",
        "type": "exec",
        "z": "2dfef0ab.ecafb",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/bind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Bind",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "644cae78.ddf9e"
            ],
            [],
            []
        ]
    },
    {
        "id": "436c8563.1de7ec",
        "type": "comment",
        "z": "2dfef0ab.ecafb",
        "name": "Safe Shutdown - Button Input",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "90f62c2a.dabf6",
        "type": "inject",
        "z": "2dfef0ab.ecafb",
        "name": "Check Heartbeat else Reboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 190,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "103c5d88.3cfde2",
        "type": "function",
        "z": "2dfef0ab.ecafb",
        "name": "Formatting",
        "func": "var HB = flow.get(\"PLC_Heartbeat\");\nif (HB === \"1\") {\n    flow.set(\"PLC_Heartbeat\", \"0\");\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 420,
        "wires": [
            [
                "cfb64e9f.29485"
            ]
        ]
    },
    {
        "id": "cfb64e9f.29485",
        "type": "exec",
        "z": "2dfef0ab.ecafb",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "977b2c92.4b25c",
        "type": "inject",
        "z": "ffd1475f.49ff98",
        "name": "Poll",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 360,
        "wires": [
            [
                "adb257eb.5080e8"
            ]
        ]
    },
    {
        "id": "adb257eb.5080e8",
        "type": "function",
        "z": "ffd1475f.49ff98",
        "name": "Email Heartbeat",
        "func": "msg = {\n    payload: \"48hr activity notification email.\",\n    topic: \"Ignore\",\n    to: \"monicon.sess@gmail.com\",\n    cc: \"\",\n    bcc: \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 360,
        "wires": [
            [
                "2a682822.1833f8"
            ]
        ]
    },
    {
        "id": "2a682822.1833f8",
        "type": "e-mail",
        "z": "ffd1475f.49ff98",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "monicon.sess@gmail.com",
        "x": 840,
        "y": 240,
        "wires": []
    },
    {
        "id": "4d4a2595.d2e94c",
        "type": "inject",
        "z": "98a15ed9.8e1d5",
        "name": "Site Name",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MONITOR_JC",
        "payloadType": "str",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "998c55c4.7c4e18"
            ]
        ]
    },
    {
        "id": "36cca0a4.a6708",
        "type": "comment",
        "z": "98a15ed9.8e1d5",
        "name": "Set Site Name",
        "info": "",
        "x": 90,
        "y": 20,
        "wires": []
    },
    {
        "id": "998c55c4.7c4e18",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Set Site Name Manually",
        "func": "// Set Site ID Manually\nglobal.set(\"siteID\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "6856238e.c4acac",
        "type": "comment",
        "z": "ffd1475f.49ff98",
        "name": "Start InfluxDB",
        "info": "",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "1b0409d6.a10ac6",
        "type": "inject",
        "z": "ffd1475f.49ff98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 500,
        "wires": [
            [
                "9cbb69e0.3638e8"
            ]
        ]
    },
    {
        "id": "9cbb69e0.3638e8",
        "type": "exec",
        "z": "ffd1475f.49ff98",
        "command": "sudo influxd -config /etc/influxdb/influxdb.conf",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Start InfluxDB",
        "x": 420,
        "y": 500,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "38f1abd8.6a3c24",
        "type": "comment",
        "z": "ffd1475f.49ff98",
        "name": "Start Monitoring Display",
        "info": "",
        "x": 140,
        "y": 580,
        "wires": []
    },
    {
        "id": "17c164de.26d36b",
        "type": "inject",
        "z": "ffd1475f.49ff98",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8868cd4f.27c2e",
        "type": "exec",
        "z": "ffd1475f.49ff98",
        "command": "/usr/bin/grafana-kiosk -URL=https://moniconsess.grafana.net/playlists/play/1 -login-method=gcom -username=monicon.sys@gmail.com -password=bullshit232 -kiosk-mode=full -playlists -autofit=true",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Grafana HDMI Display Start",
        "x": 760,
        "y": 620,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "ce4b927.8dd9c7",
        "type": "function",
        "z": "ffd1475f.49ff98",
        "name": "Playlist Number",
        "func": "msg.payload = \"/usr/bin/grafana-kiosk \";\nmsg.payload = msg.payload.concat(\"-URL=https://moniconsess.grafana.net/playlists/play/\");\n\n//==============================================================================================================\n// Change Playlist number to reflect which Dashboard you want to display\nmsg.payload = msg.payload.concat(\"1\");\n//==============================================================================================================\n\nmsg.payload = msg.payload.concat(\"-login-method=gcom \");\nmsg.payload = msg.payload.concat(\"-username=monicon.sys@gmail.com -password=bullshit232 \");\nmsg.payload = msg.payload.concat(\"-kiosk-mode=full -playlists -autofit=true\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 620,
        "wires": [
            [
                "8868cd4f.27c2e"
            ]
        ]
    },
    {
        "id": "ec5220d1.cfdbd",
        "type": "file in",
        "z": "98a15ed9.8e1d5",
        "name": "Node Packages",
        "filename": "/home/pi/.node-red/package.json",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 820,
        "y": 1040,
        "wires": [
            [
                "9cba6432.82c588",
                "51bc1173.5eed"
            ]
        ]
    },
    {
        "id": "117081e4.7b605e",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "Check macAddress",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1040,
        "wires": [
            [
                "ec5220d1.cfdbd"
            ]
        ]
    },
    {
        "id": "94c518d4.3ac9c8",
        "type": "mqtt in",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Nodes/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "117081e4.7b605e"
            ]
        ]
    },
    {
        "id": "9cba6432.82c588",
        "type": "function",
        "z": "98a15ed9.8e1d5",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n//msg.payload = \"Query on Local Database Executed Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1040,
        "wires": [
            [
                "911354a8.543c08"
            ]
        ]
    },
    {
        "id": "5b1b32a7.6d797c",
        "type": "mqtt in",
        "z": "13f38902.4f51a7",
        "name": "",
        "topic": "MONICON/CMD/OS/",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "b384f4d3.c69d48",
                "96639786.7d1988",
                "3c05b63f.7e76ea",
                "3298636d.0d713c",
                "4c5a1f7c.4ac76",
                "67f260d3.77732"
            ]
        ]
    },
    {
        "id": "c4fcb206.f611f",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "IP Addr",
        "func": "var data = msg.payload.networkInterfaces.wlan0[0].address\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/IP\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 320,
        "wires": [
            [
                "b8d64944.e51f28",
                "26e57e48.28e862"
            ]
        ]
    },
    {
        "id": "de640c83.2923b",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"}\n\nreturn msg1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 360,
        "wires": [
            [
                "b8d64944.e51f28",
                "fedc5c9c.1772a"
            ]
        ]
    },
    {
        "id": "b8d64944.e51f28",
        "type": "mqtt out",
        "z": "13f38902.4f51a7",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "15806ae7.4eb835",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Model",
        "func": "var data = msg.payload.cpus[0].model\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/MODEL\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "b8d64944.e51f28",
                "96325d3e.891e7"
            ]
        ]
    },
    {
        "id": "67031d95.43ce14",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "b8d64944.e51f28",
                "9a4d36e3.774d58"
            ]
        ]
    },
    {
        "id": "8cc693fc.fef51",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "RAM (MB)",
        "func": "var data = msg.payload\n\nvar ramSize = String((data.totalmem / 1000000).toFixed(2)) + \",\" + String((data.freemem / 1000000).toFixed(2)) + \",\" + String(parseFloat(data.memusage).toFixed(0))\n\nvar msg1 = { payload: ramSize, topic: \"MONICON/STAT/OS/RAM\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "b8d64944.e51f28",
                "4f4daedc.7564a"
            ]
        ]
    },
    {
        "id": "9a4d36e3.774d58",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\n        \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalMem: parseFloat(output[0]),\n            UsedMem: parseFloat(output[1]),\n            FreeMem: parseFloat(output[2]),\n            PercentMem: parseFloat(output[3])\n        },\n        tags:{\n            System: \"HDD\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"HDD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalMem: parseFloat(output[0]),\n                UsedMem: parseFloat(output[1]),\n                FreeMem: parseFloat(output[2]),\n                PercentMem: parseFloat(output[3])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "1b2e9eeb.3597c1"
            ],
            [
                "a405fbb6.b431a8"
            ]
        ]
    },
    {
        "id": "9370c70c.636218",
        "type": "inject",
        "z": "13f38902.4f51a7",
        "name": "30sec Cycle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "60398363.39e22c"
            ]
        ]
    },
    {
        "id": "96325d3e.891e7",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    //msg.payload = msg.payload.replace(/\\s+/g, '_')\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Model: msg.payload\n        },\n        tags:{\n            System: \"Model\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Model\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tModel: String(msg.payload[0].fields.Model)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "e3ea4974.9163f8"
            ],
            [
                "51cc6e7b.e820b"
            ]
        ]
    },
    {
        "id": "26e57e48.28e862",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            IPAddr: msg.payload\n        },\n        tags:{\n            System: \"IP\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"IP\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tIPAddr: String(msg.payload[0].fields.IPAddr)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "e3ea4974.9163f8"
            ],
            [
                "51cc6e7b.e820b"
            ]
        ]
    },
    {
        "id": "fedc5c9c.1772a",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet deploys = global.get(\"deploys\") || 0;\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Uptime: msg.payload,\n            Deploys: parseFloat(deploys)\n        },\n        tags:{\n            System: \"UPTIME\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n    let uptime = String(msg.payload[0].fields.Uptime);\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"UPTIME\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tUptime: uptime,\n\t\t\t\tDeploys: parseFloat(deploys)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 360,
        "wires": [
            [
                "e3ea4974.9163f8"
            ],
            [
                "51cc6e7b.e820b"
            ]
        ]
    },
    {
        "id": "dc73ba08.b97628",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Hostname: msg.payload,\n        },\n        tags:{\n            System: \"Hostname\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Hostname\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tHostname: String(msg.payload[0].fields.Hostname),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 240,
        "wires": [
            [
                "e3ea4974.9163f8"
            ],
            [
                "51cc6e7b.e820b"
            ]
        ]
    },
    {
        "id": "4f4daedc.7564a",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalRam: parseFloat(output[0]),\n            FreeRam: parseFloat(output[1]),\n            PercentRam: parseFloat(output[2])\n        },\n        tags:{\n            System: \"RAM\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"RAM\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalRam: parseFloat(output[0]),\n                FreeRam: parseFloat(output[1]),\n                PercentRam: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "1b2e9eeb.3597c1"
            ],
            [
                "a405fbb6.b431a8"
            ]
        ]
    },
    {
        "id": "cb7992b0.c4264",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Hostname",
        "func": "var data = msg.payload.hostname\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Hostname\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "dc73ba08.b97628"
            ]
        ]
    },
    {
        "id": "9be50a40.0703e8",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Temperature",
        "func": "var data = msg.payload\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Temperature\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 400,
        "wires": [
            [
                "b8bd93d0.8988d",
                "b8d64944.e51f28",
                "b5d9f064.b02e3"
            ]
        ]
    },
    {
        "id": "b8bd93d0.8988d",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"  \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Temperature: msg.payload,\n        },\n        tags:{\n            System: \"Temperature\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Temperature\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTemperature: parseFloat(msg.payload[0].fields.Temperature),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 400,
        "wires": [
            [
                "8fbae791.1b3248"
            ],
            [
                "cd1b5a27.0e5e68",
                "3d3caff6.a3662"
            ]
        ]
    },
    {
        "id": "3c05b63f.7e76ea",
        "type": "OS",
        "z": "13f38902.4f51a7",
        "name": "",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "cb7992b0.c4264"
            ]
        ]
    },
    {
        "id": "3298636d.0d713c",
        "type": "Drives",
        "z": "13f38902.4f51a7",
        "name": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "67031d95.43ce14"
            ]
        ]
    },
    {
        "id": "67f260d3.77732",
        "type": "Uptime",
        "z": "13f38902.4f51a7",
        "name": "",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "de640c83.2923b"
            ]
        ]
    },
    {
        "id": "96639786.7d1988",
        "type": "CPUs",
        "z": "13f38902.4f51a7",
        "name": "",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "15806ae7.4eb835"
            ]
        ]
    },
    {
        "id": "4c5a1f7c.4ac76",
        "type": "Memory",
        "z": "13f38902.4f51a7",
        "name": "",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "8cc693fc.fef51"
            ]
        ]
    },
    {
        "id": "b384f4d3.c69d48",
        "type": "NetworkIntf",
        "z": "13f38902.4f51a7",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "c4fcb206.f611f"
            ]
        ]
    },
    {
        "id": "1e0451c4.9786fe",
        "type": "cpu",
        "z": "13f38902.4f51a7",
        "name": "",
        "msgCore": false,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": true,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "9be50a40.0703e8"
            ]
        ]
    },
    {
        "id": "f83e18ab.8598d8",
        "type": "exec",
        "z": "13f38902.4f51a7",
        "command": "iw dev | grep -m1 ssid | awk '{print $2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "SSID",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "c78a9acf.e6a3a8"
            ],
            [],
            []
        ]
    },
    {
        "id": "5863c57d.5b9a9c",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSID: msg.payload,\n            SiteID: siteID\n        },\n        tags:{\n            System: \"SSID\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSID\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSID: String(msg.payload),\n\t\t\t\tSiteID: String(siteID),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 520,
        "wires": [
            [
                "8fbae791.1b3248"
            ],
            [
                "cd1b5a27.0e5e68"
            ]
        ]
    },
    {
        "id": "c78a9acf.e6a3a8",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "SSID",
        "func": "var data = String(msg.payload.replace(/[\\n\\r]+/g, ' ').replace(/\\s{2,}/g,' ').replace(/^\\s+|\\s+$/,'') )\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "5863c57d.5b9a9c"
            ]
        ]
    },
    {
        "id": "cd2a76a5.b9a328",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Used mem(SSD)",
        "func": "let msg1 = {payload : \"df -h | grep -i sda1 | awk '{print $3\\\"/\\\"}';df -h | grep -i sda1 | awk '{print $2}'\", topic :\"Used mem(SSD)\"}\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 600,
        "wires": [
            [
                "3f0b546c.186f6c"
            ]
        ]
    },
    {
        "id": "3f0b546c.186f6c",
        "type": "exec",
        "z": "13f38902.4f51a7",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "b3421e83.13488"
            ],
            [],
            []
        ]
    },
    {
        "id": "b3421e83.13488",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Used mem(SSD)",
        "func": "if(msg.topic != \"Used mem(SSD)\") {\n    return\n}\n\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet data = msg.payload.split('/')\n\n//return msg;\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSD_Used: data[0],//.replace(/\\D/g,'')), //removes non numerical characters\n            SSD_Total: data[1],//.replace(/\\D/g,'')), //removes non numerical characters\n        },\n        tags:{\n            System: \"SSD\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n    let usedMem = String(data[0].replace(/\\s+/g, ' ').trim());\n    let totMem = String(data[1].replace(/\\s+/g, ' ').trim());\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSD_Used: usedMem,\n\t\t\t\tSSD_Total: totMem,\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 600,
        "wires": [
            [
                "8fbae791.1b3248"
            ],
            [
                "cd1b5a27.0e5e68"
            ]
        ]
    },
    {
        "id": "34facf72.328c5",
        "type": "link in",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "5afc05bb.2e332c"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "4c5a1f7c.4ac76",
                "3298636d.0d713c",
                "3c05b63f.7e76ea",
                "96639786.7d1988",
                "b384f4d3.c69d48",
                "67f260d3.77732",
                "1e0451c4.9786fe",
                "f83e18ab.8598d8",
                "cd2a76a5.b9a328",
                "a4181a71.faa8c8"
            ]
        ]
    },
    {
        "id": "5afc05bb.2e332c",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "30SecCycle",
        "links": [
            "34facf72.328c5"
        ],
        "x": 615,
        "y": 80,
        "wires": []
    },
    {
        "id": "1b2e9eeb.3597c1",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "99efd2a3.7113"
        ],
        "x": 1115,
        "y": 80,
        "wires": []
    },
    {
        "id": "a405fbb6.b431a8",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "96dff132.a5bc8"
        ],
        "x": 1115,
        "y": 160,
        "wires": []
    },
    {
        "id": "e3ea4974.9163f8",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "99efd2a3.7113"
        ],
        "x": 1115,
        "y": 240,
        "wires": []
    },
    {
        "id": "8fbae791.1b3248",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "99efd2a3.7113"
        ],
        "x": 1115,
        "y": 400,
        "wires": []
    },
    {
        "id": "51cc6e7b.e820b",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "96dff132.a5bc8"
        ],
        "x": 1115,
        "y": 360,
        "wires": []
    },
    {
        "id": "cd1b5a27.0e5e68",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "96dff132.a5bc8"
        ],
        "x": 1115,
        "y": 600,
        "wires": []
    },
    {
        "id": "a4181a71.faa8c8",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    msg.payload = macAddr;\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "5b994da.7006ab4"
            ],
            [
                "5d3dc1fb.1def3"
            ]
        ]
    },
    {
        "id": "5b994da.7006ab4",
        "type": "exec",
        "z": "13f38902.4f51a7",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "d4cd72eb.048bb"
            ],
            [],
            []
        ]
    },
    {
        "id": "d4cd72eb.048bb",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nmsg.payload = macAddr;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "5d3dc1fb.1def3"
            ]
        ]
    },
    {
        "id": "60398363.39e22c",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Developer macAddr Block",
        "func": "let macAddr = global.get(\"macAddr\") || \"nSet\";\nif(macAddr == \"b827ebf15f4e\" || macAddr == \"b827eba5dff3\") {\n    return\n} \nelse if (macAddr == \"nSet\") {\n    return [[msg], [null]];\n} else {\n    return [[null], [msg]];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "15d9f7d0.90c188"
            ],
            [
                "5afc05bb.2e332c"
            ]
        ]
    },
    {
        "id": "9233404d.fda4",
        "type": "comment",
        "z": "13f38902.4f51a7",
        "name": "Get local macaddr",
        "info": "",
        "x": 410,
        "y": 720,
        "wires": []
    },
    {
        "id": "15d9f7d0.90c188",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "Get macAddr if Not Defined",
        "links": [
            "11c74579.3eeadb"
        ],
        "x": 615,
        "y": 40,
        "wires": []
    },
    {
        "id": "b5d9f064.b02e3",
        "type": "link out",
        "z": "13f38902.4f51a7",
        "name": "",
        "links": [
            "173f830e.a35e8d"
        ],
        "x": 835,
        "y": 460,
        "wires": []
    },
    {
        "id": "5d3dc1fb.1def3",
        "type": "function",
        "z": "13f38902.4f51a7",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"macAddr\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tmacAddr: String(msg.payload)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 760,
        "wires": [
            [
                "cd1b5a27.0e5e68"
            ]
        ]
    },
    {
        "id": "51bc1173.5eed",
        "type": "debug",
        "z": "98a15ed9.8e1d5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 1140,
        "wires": []
    },
    {
        "id": "86e3e115.3d8bb",
        "type": "mqtt in",
        "z": "96e1bdf8.23a17",
        "name": "",
        "topic": "MONICON-PLC/CMD/Systems/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 140,
        "wires": [
            [
                "928fbe8c.0dbb"
            ]
        ]
    },
    {
        "id": "928fbe8c.0dbb",
        "type": "function",
        "z": "96e1bdf8.23a17",
        "name": "System Data",
        "func": "let siteID = global.get(\"siteID\") || \"SiteIDxxx\";\nlet macAddr = global.get(\"macAddr\") || \"NotSet\";\nlet serverVersion = global.get(\"serverVersion\") || \"MONICON-PLC_ServerV0.0.0\"\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload.replace('*', 'Server');\n\nmsg.payload = data + \",\" + serverVersion;\nmsg.topic = \"sess/\" + msg.topic.replace('CMD', 'STAT');\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 140,
        "wires": [
            [
                "5e8aba1b.25c0f4",
                "d214538d.1df7b"
            ]
        ]
    },
    {
        "id": "d214538d.1df7b",
        "type": "debug",
        "z": "96e1bdf8.23a17",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 160,
        "wires": []
    },
    {
        "id": "b06efbe2.39fe38",
        "type": "debug",
        "z": "96e1bdf8.23a17",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 800,
        "y": 420,
        "wires": []
    },
    {
        "id": "3d3caff6.a3662",
        "type": "debug",
        "z": "13f38902.4f51a7",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 480,
        "wires": []
    }
]